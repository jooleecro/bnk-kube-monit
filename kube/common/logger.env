#!/bin/bash

LEVEL_ALL=0
LEVEL_DEBUG=1
LEVEL_INFO=2
LEVEL_WARN=3
LEVEL_ERR=4


LOG_LEVEL=${LEVEL_DEBUG}



_HDR_FMT="[%.23s][%s][%s]: "
_MSG_FMT="${_HDR_FMT}%s\n"
_TITLE_ALL="[ALL  ]"
_TITLE_DEBUG=$(echo_green "[DEBUG]")
_TITLE_INFO=$(echo_blue "[INFO ]")
_TITLE_WARN=$(echo_magenta "[WARN ]")
_TITLE_ERROR=$(echo_red "[ERROR]")
_TITLE_STEP=$(echo_yellow "[STEP ]")
_TITLE_EXEC=$(echo_green "[EXEC ]")
_TITLE_REXEC=$(echo_blue "[REXEC]")



mkdir -p ${LOG_PATH}
#mkdir -p ${COMPLETE_LOG_PATH}
#mkdir -p ${BACKUP_LOG_PATH}
#mkdir -p ${ERROR_LOG_PATH}


function flog(){
	mkdir -p ${LOG_PATH}
	cat | tee -a "${LOG_EXEC}" | cat 1>&2
}

function log(){
	local TITLE=$1
	local SOURCE=$2
	local LINE=$3
	local MSG=$4
	printf "${TITLE}${_MSG_FMT}" $(date +%F.%T) ${SOURCE} ${LINE} "${MSG}" | flog
}



function all(){
	if [ ${LOG_LEVEL} -le ${LEVEL_ALL} ]
	then
		local MSG=${@}
		log "${_TITLE_ALL}" "${BASH_SOURCE[1]##*/}" "${BASH_LINENO[0]}" "${MSG}"
	fi
}

function debug(){
	if [ ${LOG_LEVEL} -le ${LEVEL_DEBUG} ]
	then
		local MSG=${@}
		log "${_TITLE_DEBUG}" "${BASH_SOURCE[1]##*/}" "${BASH_LINENO[0]}" "${MSG}"
	fi
}

function info(){
	if [ ${LOG_LEVEL} -le ${LEVEL_INFO} ]
	then
		local MSG=${@}
		log "${_TITLE_INFO}" "${BASH_SOURCE[1]##*/}" "${BASH_LINENO[0]}" "${MSG}"
	fi
}

function warn(){
	if [ ${LOG_LEVEL} -le ${LEVEL_WARN} ]
	then
		local MSG=${@}
		log "${_TITLE_WARN}" "${BASH_SOURCE[1]##*/}" "${BASH_LINENO[0]}" "${MSG}"
	fi

}

function error(){
	if [ ${LOG_LEVEL} -le ${LEVEL_ERR} ]
	then
		local MSG=${@}
		log "${_TITLE_ERROR}" "${BASH_SOURCE[1]##*/}" "${BASH_LINENO[0]}" "${MSG}"
	fi

}


function step(){
	local MSG=${@}
	STEP_CUR=$(($STEP_CUR + 1))
	log  "${_TITLE_STEP}" "${BASH_SOURCE[1]##*/}" "${BASH_LINENO[0]}" "[${STEP_CUR}/${STEP_TOTAL}] ${MSG}"
}

function log_exec(){
	local MSG=${@}
	log "${_TITLE_EXEC}" "${BASH_SOURCE[2]##*/}" "${BASH_LINENO[1]}" "${MSG}"
}

function log_rexec(){
	local MSG=${@}
	log "${_TITLE_REXEC}" "${BASH_SOURCE[2]##*/}" "${BASH_LINENO[1]}" "${MSG}"
}








